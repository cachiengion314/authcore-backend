datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider                                 = "node node_modules/prisma-nestjs-graphql"
  output                                   = "../src/@generated"
  noAtomicOperations                       = false
  combineScalarFilters                     = false
  reExport                                 = None
  emitSingle                               = false
  emitCompiled                             = false
  purgeOutput                              = false
  requireSingleFieldsInWhereUniqueInput    = false
  fields_Validator_from                    = "class-validator"
  fields_Validator_input                   = true
  fields_Scalars_from                      = "graphql-scalars"
  fields_Scalars_input                     = true
  useInputType_WhereInput_ALL              = "WhereInput"
  decorate_hideSomeCreateInput_type        = "@(*Create*Input)"
  decorate_hideSomeCreateInput_field       = "@(id|createdAt|updatedAt|createdBy|updatedBy|createdById|updatedById|deletedAt)"
  decorate_hideSomeCreateInput_name        = HideField
  decorate_hideSomeCreateInput_from        = "@nestjs/graphql"
  decorate_hideSomeCreateInput_arguments   = "[]"
  decorate_sortdefault_type                = "*FindMany*Args"
  decorate_sortdefault_field               = "@(orderBy)"
  decorate_sortdefault_name                = Field
  decorate_sortdefault_from                = "@nestjs/graphql"
  decorate_sortdefault_arguments           = "['() => [{propertyType.0}], { nullable: true, defaultValue: [{ createdAt: `desc` }] }']"
  decorate_hidepassword_type               = "*Update*Input"
  decorate_hidepassword_field              = "@(createdAt|updatedAt|createdBy|updatedBy|createdById|updatedById|deletedAt|password)"
  decorate_hidepassword_name               = HideField
  decorate_hidepassword_from               = "@nestjs/graphql"
  decorate_hidepassword_arguments          = "[]"
  decorate_hidecreatenestedinput_type      = "*CreateNested*Without*"
  decorate_hidecreatenestedinput_field     = "!(connect)"
  decorate_hidecreatenestedinput_name      = "HideField"
  decorate_hidecreatenestedinput_from      = "@nestjs/graphql"
  decorate_hidecreatenestedinput_arguments = "[]"
  decorate_whereinputdefault_type          = "*WhereInput"
  decorate_whereinputdefault_field         = "@(deletedAt)"
  decorate_whereinputdefault_name          = Field
  decorate_whereinputdefault_from          = "@nestjs/graphql"
  decorate_whereinputdefault_arguments     = "['() => [{propertyType.0}], { nullable: true, defaultValue: null }']"
}

enum ActiveStatus {
  Active // Hoạt động 
  Locked // Khóa
}

enum Gender {
  Male
  Female
}

enum RoleType {
  Root
  Admin
  Developer
  Customer
}

model User {
  id String @id @default(cuid())

  code          String?      @unique // Code	String		x	Unique, Mã nhân viên
  originalId    String       @unique // OriginalId	String			Unique, AzureId
  fullName      String? // FullName	String		x	Họ tên
  department    Department?  @relation("departmentHistory", fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  departmentId  String? // DepartmentId	Guid		x	FK, Department
  jobTitle      String? // JobTitle	String		x	Chức danh
  position      String? // Position	String		x	Vị trí
  dateOfBirth   DateTime? // DateOfBirth	Date		x	Ngày sinh
  gender        Gender?      @default(Male) // Gender	Enum	"Male Female"	x	
  email         String       @unique // azure email
  phoneNumber   String? // PhoneNumber	String		x	Số điện thoại
  avartarUrl    String? // AvartarUrl	String		x	Đường dẫn ảnh đại diện
  backgroundUrl String? // BackgroundUrl	String		x	Đường dẫn ảnh nền
  isAdmin       Boolean // IsAdmin	Bool			Quản trị
  status        ActiveStatus @default(Active) // Status	Enum	"Active

  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  createdUsers User[] @relation("createdByHistory")
  updatedUsers User[] @relation("updatedByHistory")

  createdUserIndustries UserIndustry[] @relation("userHistory")
  createdUserAwards     UserAward[]    @relation("userHistory")
  createdUserGroups     UserGroup[]    @relation("userHistory")

  createIdeas       Idea[]       @relation("createdByHistory")
  updateIdeas       Idea[]       @relation("updatedByHistory")
  createFeedbacks   Feedback[]   @relation("createdByHistory")
  updateFeedbacks   Feedback[]   @relation("updatedByHistory")
  createPosts       Post[]       @relation("createdByHistory")
  updatePosts       Post[]       @relation("updatedByHistory")
  createRoles       Role[]       @relation("createdByHistory")
  updateRoles       Role[]       @relation("updatedByHistory")
  createAwards      Award[]      @relation("createdByHistory")
  updateAwards      Award[]      @relation("updatedByHistory")
  createTags        Tag[]        @relation("createdByHistory")
  updateTags        Tag[]        @relation("updatedByHistory")
  createTopics      Topic[]      @relation("createdByHistory")
  updateTopics      Topic[]      @relation("updatedByHistory")
  createIndustries  Industry[]   @relation("createdByHistory")
  updateIndustries  Industry[]   @relation("updatedByHistory")
  createDepartments Department[] @relation("createdByHistory")
  updateDepartments Department[] @relation("updatedByHistory")
  createUserVotes   UserVote[]   @relation("createdByHistory")
  updateUserVotes   UserVote[]   @relation("updatedByHistory")
  createPostIdeas   PostIdea[]   @relation("createdByHistory")
  updatePostIdeas   PostIdea[]   @relation("updatedByHistory")

  @@map("users")
}

model Role {
  id String @id @default(cuid())

  name        String   @unique
  type        RoleType @default(Developer)
  description String

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("roles")
}

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rules")
}

model UserIndustry {
  id String @id @default(cuid())

  user        User     @relation("userHistory", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String // UserId	Guid			FK, User
  industry    Industry @relation("industryHistory", fields: [industryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  industryId  String // IndustryId	Guid			FK, Industry
  description String?

  @@map("user_industries")
}

model UserAward {
  id String @id @default(cuid())

  user       User     @relation("userHistory", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String // UserId	Guid			FK, User
  award      Award    @relation("awardHistory", fields: [awardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  awardId    String // AwardId	Guid			FK, Group
  receivedAt DateTime // ReceivedAt	Date			Ngày nhận giải thưởng

  @@map("user_awards")
}

model Group {
  id String @id @default(cuid())

  name             String // Name	String			Tên nhóm
  shortDescription String? // ShortDescription	String		x	Mô tả ngắn gọn
  longDescription  String? // LongDescription	String		x	Mô tả đầy đủ
  thumbnailUrl     String? // ThumbnailUrl	String		x	Đường dẫn ảnh biểu tượng
  backgroundUrl    String? // BackgroundUrl	String		x	Đường dẫn ảnh nền
  memberCount      Int // MemberCount	Number			Số lượng thành viên
  postCount        Int // PostCount	Number			Số lượng bài viết
  status           ActiveStatus @default(Active) // Status	Enum	"Active

  createdUserGroups UserGroup[] @relation("groupHistory")

  @@map("groups")
}

model UserGroup {
  id String @id @default(cuid())

  user     User         @relation("userHistory", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String // UserId	Guid			FK, User
  group    Group        @relation("groupHistory", fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId  String // GroupId	Guid			FK, Group
  joinedAt DateTime // JoinedAt	Date
  status   ActiveStatus @default(Active) // Status	Enum	"Active

  @@map("user_groups")
}

enum PostType {
  Post
  Campaign
  Announcement
}

enum PostStatus {
  Editing
  Published
  Suspended
  WaitingForApproval
}

model Post {
  id String @id @default(cuid())

  slug        String     @unique // Slug	String			Unique, Đường dẫn để rewrite
  type        PostType   @default(Post) // Type	Enum	"Announcement Post Campaign"		
  title       String // Title	String			Tiêu đề
  subTitle    String? // SubTitle	String		x	Tiêu đề phụ
  head        String // Head	String			Mô tả ngắn
  content     String // Content	String			Nội dung
  tag         String // Tag	String			Các từ khóa, cách nhau bởi dấu phẩy
  viewCount   Int // ViewCount	Number			Lượt xem
  likeCount   Int // LikeCount	Number			Lượt thích
  status      PostStatus // Status	Enum	"Editing WaitingForApproval Published Suspended"
  editingBy   String? // EditingBy	Guid		x	FK, User
  approvedBy  String? // ApprovedBy	Guid		x	FK, User
  publishedAt DateTime // PublishedAt	Date			Ngày xuất bản
  expiredAt   DateTime // ExpiredAt	Date			Ngày hết hạn

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("posts")
}

model PostTopic {
  id String @id @default(cuid())

  postId      String // PostId	Guid		 	FK, Post
  topicId     String // TopicId	Guid			FK, Topic
  description String?

  @@map("post_topics")
}

model PostTag {
  id String @id @default(cuid())

  postId      String // PostId	Guid		 	FK, Post
  tagId       String // TagId	Guid			FK, Tag
  description String?

  @@map("post_tags")
}

enum FeedbackType {
  Feedback
  Question
}

enum FeedbackStatus {
  Waiting
  Editing
  Completed
  Rejected
}

model Feedback {
  id String @id @default(cuid())

  type          FeedbackType   @default(Feedback) // Type	Enum	"Feedback Question"		Loại góp ý
  industryId    String // IndustryId	Guid			FK, Industry
  departmentId  String // DepartmentId	Guid			FK, Department
  title         String // Title	String		 	Tiêu đề
  content       String? // Content	String		x	Nội dung
  reply         String? // Reply	String		x	Trả lời
  attachmentUrl String? // AttachmentUrl	String		x	Đường dẫn file đính kèm
  status        FeedbackStatus @default(Waiting) // Status	Enum	"Waiting Editing Completed Rejected"
  editingBy     String // EditingBy	Guid			FK, User
  resolvedBy    String // ResolvedBy	Guid			FK, User

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("feedbacks")
}

model PostIdea {
  id String @id @default(cuid())

  postId      String // PostId	Guid			FK, Post
  userId      String // UserId	Guid			FK, User
  ideaId      String // IdeaId	Guid			FK, Idea
  description String? // IdeaId	Guid			FK, Idea

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("post_ideas")
}

enum IdeaStatus {
  Waiting
  Editing
  Approved
  Rejected
}

model Idea {
  id String @id @default(cuid())

  title      String // Title	String		 	Tiêu đề
  content    String? // Content	String		x	Nội dung
  status     IdeaStatus @default(Waiting) // Status	Enum	"Waiting Editing Approved Rejected"
  editingBy  String // EditingBy	Guid			FK, User
  approvedBy String // ApprovedBy	Guid			FK, User

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("ideas")
}

model UserVote {
  id String @id @default(cuid())

  postId      String // PostId	Guid			FK, Post
  userId      String // UserId	Guid			FK, User
  ideaId      String // IdeaId	Guid			FK, Idea
  description String? // IdeaId	Guid			FK, Idea

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("user_votes")
}

model Department {
  id String @id @default(cuid())

  code        String?      @unique // Code	String		x	Unique
  name        String // Name	String		 	Địa điểm
  description String? // Description	String		x	Mô tả
  parent      Department?  @relation("parentChain", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  parentId    String? // ParentId	Guid		x	FK, Topic
  sortOrder   Int          @default(0) // SortOrder	Number			Thứ tự
  status      ActiveStatus @default(Active) // Status	Enum	"Active

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  childs Department[] @relation("parentChain")
  users  User[]       @relation("departmentHistory")

  @@map("departments")
}

model Industry {
  id String @id @default(cuid())

  code        String?      @unique // Code	String		x	Unique
  name        String // Name	String		 	Địa điểm
  description String? // Description	String		x	Mô tả
  sortOrder   Int          @default(0) // SortOrder	Number			Thứ tự
  status      ActiveStatus @default(Active) // Status	Enum	"Active

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  userIndustries UserIndustry[] @relation("industryHistory")

  @@map("industries")
}

model Topic {
  id String @id @default(cuid())

  slug        String       @unique // Slug	String			Unique, Đường dẫn để rewrite
  name        String // Name	String		 	Địa điểm
  description String? // Description	String		x	Mô tả
  parent      Topic?       @relation("parentChain", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  parentId    String? // ParentId	Guid		x	FK, Topic
  sortOrder   Int          @default(0) // SortOrder	Number			Thứ tự
  status      ActiveStatus @default(Active) // Status	Enum	"Active

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  childs Topic[] @relation("parentChain")

  @@map("topics")
}

model Tag {
  id String @id @default(cuid())

  code        String? // Code	String		x	Unique
  name        String // Name	String		 	Tên
  description String? // Description	String		x	Mô tả
  sortOrder   Int          @default(0) // SortOrder	Number			Thứ tự
  status      ActiveStatus @default(Active) // Status	Enum	"Active

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  @@map("tags")
}

model Award {
  id String @id @default(cuid())

  code         String? // Code	String		x	Unique
  name         String // Name	String		 	Tên
  description  String? // Description	String		x	Mô tả
  thumbnailUrl String? // ThumbnailUrl	String		x	Đường dẫn Icon biểu tượng
  sortOrder    Int          @default(0) // SortOrder	Number			Thứ tự
  status       ActiveStatus @default(Active) // Status	Enum	"Active

  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("createdByHistory", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  createdById String?
  updatedBy   User?     @relation("updatedByHistory", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: SetNull)
  updatedById String?

  createdUserAward UserAward[] @relation("awardHistory")

  @@map("awards")
}
